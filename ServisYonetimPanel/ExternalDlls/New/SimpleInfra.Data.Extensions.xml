<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleInfra.Data.Extensions</name>
    </assembly>
    <members>
        <member name="M:SimpleInfra.Data.Extensions.ConnectionExtensions.SimpleDbAnonymousDynOperator.QueryFirstDynamic(System.Data.IDbConnection,System.String,System.Object,System.Data.CommandType,System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="sqlText"></param>
            <param name="obj"></param>
            <param name="commandType"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.ConnectionExtensions.SimpleDbAnonymousDynOperator.QueryLastDynamic(System.Data.IDbConnection,System.String,System.Object,System.Data.CommandType,System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="sqlText"></param>
            <param name="obj"></param>
            <param name="commandType"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.ConnectionExtensions.SimpleDbAnonymousDynOperator.QueryListDynamic(System.Data.IDbConnection,System.String,System.Object,System.Data.CommandType,System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="sqlText"></param>
            <param name="obj"></param>
            <param name="commandType"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.ConnectionExtensions.SimpleDbAnonymousDynOperator.QueryListSkipAndTakeDynamic(System.Data.IDbConnection,System.String,System.Object,System.Data.CommandType,System.Data.IDbTransaction,System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="sqlText"></param>
            <param name="obj"></param>
            <param name="commandType"></param>
            <param name="transaction"></param>
            <param name="skip"></param>
            <param name="take"></param>
            <returns></returns>
        </member>
        <member name="T:SimpleInfra.Data.Extensions.SimpleDbAnonymousOperator">
            <summary>
            
            </summary>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAnonymousOperator.GetParametersFromObject(System.Data.IDbConnection,System.Object)">
            <summary>
            Gets parameters from 
            </summary>
            <param name="connection"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAnonymousOperator.QueryExecute(System.Data.IDbConnection,System.String,System.Object,System.Data.CommandType,System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="sql"></param>
            <param name="commandType"></param>
            <param name="transaction"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAnonymousOperator.QueryExecuteScalar(System.Data.IDbConnection,System.String,System.Object,System.Data.CommandType,System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="sql"></param>
            <param name="obj"></param>
            <param name="commandType"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAnonymousOperator.QueryFirst``1(System.Data.IDbConnection,System.String,System.Object,System.Data.CommandType,System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="sqlText"></param>
            <param name="obj"></param>
            <param name="commandType"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAnonymousOperator.QueryLast``1(System.Data.IDbConnection,System.String,System.Object,System.Data.CommandType,System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="sqlText"></param>
            <param name="obj"></param>
            <param name="commandType"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAnonymousOperator.QueryList``1(System.Data.IDbConnection,System.String,System.Object,System.Data.CommandType,System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="sqlText"></param>
            <param name="obj"></param>
            <param name="commandType"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAnonymousOperator.QueryListSkipAndTake``1(System.Data.IDbConnection,System.String,System.Object,System.Data.CommandType,System.Data.IDbTransaction,System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="sqlText"></param>
            <param name="obj"></param>
            <param name="commandType"></param>
            <param name="transaction"></param>
            <param name="skip"></param>
            <param name="take"></param>
            <returns></returns>
        </member>
        <member name="T:SimpleInfra.Data.Extensions.SimpleDbAsyncOperator">
             <summary>   A Db connection asynchronous operation extension. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperator.ExecuteAsync(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
             An IDbConnection extension method that executes the asynchronous operation.
             </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">       The connection to act on. </param>
             <param name="sql">              The SQL. </param>
             <param name="commandType">      (Optional) Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
             <param name="inputParameters">  (Optional) Options for controlling the input. </param>
             <param name="outputParameters"> (Optional) Options for controlling the output. </param>
            
             <returns>   An asynchronous result that yields the execute. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperator.ExecuteReaderAsync(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
             An IDbConnection extension method that executes the reader asynchronous operation.
             </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">       The connection to act on. </param>
             <param name="sql">              The SQL. </param>
             <param name="commandType">      (Optional) Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
             <param name="inputParameters">  (Optional) Options for controlling the input. </param>
             <param name="outputParameters"> (Optional) Options for controlling the output. </param>
            
             <returns>   An asynchronous result that yields the execute reader. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperator.ExecuteScalarAsync(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
             An IDbConnection extension method that executes the scalar asynchronous operation.
             </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">       The connection to act on. </param>
             <param name="sql">              The SQL. </param>
             <param name="commandType">      (Optional) Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
             <param name="inputParameters">  (Optional) Options for controlling the input. </param>
             <param name="outputParameters"> (Optional) Options for controlling the output. </param>
            
             <returns>   An asynchronous result that yields the execute scalar. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperator.GetResultSetAsync(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>   An IDbConnection extension method that gets result set asynchronous. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">       The connection to act on. </param>
             <param name="sql">              The SQL. </param>
             <param name="commandType">      (Optional) Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
             <param name="inputParameters">  (Optional) Options for controlling the input. </param>
             <param name="outputParameters"> (Optional) Options for controlling the output. </param>
            
             <returns>   An asynchronous result that yields the result set. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperator.GetDynamicResultSetAsync(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
             An IDbConnection extension method that gets dynamic result set asynchronous.
             </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">       The connection to act on. </param>
             <param name="sql">              The SQL. </param>
             <param name="commandType">      (Optional) Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
             <param name="inputParameters">  (Optional) Options for controlling the input. </param>
             <param name="outputParameters"> (Optional) Options for controlling the output. </param>
            
             <returns>   An asynchronous result that yields the dynamic result set. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperator.GetDynamicResultSetWithPagingAsync(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object},System.UInt32,System.UInt32)">
             <summary>
             An IDbConnection extension method that gets dynamic result set with paging asynchronous.
             </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">       The connection to act on. </param>
             <param name="sql">              The SQL. </param>
             <param name="commandType">      Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
             <param name="inputParameters">  (Optional) Options for controlling the input. </param>
             <param name="outputParameters"> (Optional) Options for controlling the output. </param>
             <param name="pageNumber">       (Optional) The page number. </param>
             <param name="pageItemCount">    (Optional) Number of page ıtems. </param>
            
             <returns>   An asynchronous result that yields the dynamic result set with paging. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperator.GetMultiDynamicResultSetAsync(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
             An IDbConnection extension method that gets multi dynamic result set asynchronous.
             </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">       The connection to act on. </param>
             <param name="sql">              The SQL. </param>
             <param name="commandType">      (Optional) Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
             <param name="inputParameters">  (Optional) Options for controlling the input. </param>
             <param name="outputParameters"> (Optional) Options for controlling the output. </param>
            
             <returns>   An asynchronous result that yields the multi dynamic result set. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperator.FirstAsDynamicAsync(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>   An IDbConnection extension method that first as dynamic asynchronous. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">       The connection to act on. </param>
             <param name="sqlText">          The SQL text. </param>
             <param name="commandType">      (Optional) Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
             <param name="inputParameters">  (Optional) Options for controlling the input. </param>
             <param name="outputParameters"> (Optional) Options for controlling the output. </param>
            
             <returns>   An asynchronous result that yields the first as dynamic. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperator.FirstAsync``1(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>   An IDbConnection extension method that first asynchronous. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <typeparam name="T">    Generic type parameter. </typeparam>
             <param name="connection">       The connection to act on. </param>
             <param name="sqlText">          The SQL text. </param>
             <param name="commandType">      (Optional) Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
             <param name="inputParameters">  (Optional) Options for controlling the input. </param>
             <param name="outputParameters"> (Optional) Options for controlling the output. </param>
            
             <returns>   An asynchronous result that yields a T. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperator.LastAsDynamicAsync(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>   An IDbConnection extension method that last as dynamic asynchronous. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">       The connection to act on. </param>
             <param name="sqlText">          The SQL text. </param>
             <param name="commandType">      (Optional) Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
             <param name="inputParameters">  (Optional) Options for controlling the input. </param>
             <param name="outputParameters"> (Optional) Options for controlling the output. </param>
            
             <returns>   An asynchronous result that yields the last as dynamic. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperator.LastAsync``1(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>   An IDbConnection extension method that last asynchronous. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <typeparam name="T">    Generic type parameter. </typeparam>
             <param name="connection">       The connection to act on. </param>
             <param name="sqlText">          The SQL text. </param>
             <param name="commandType">      (Optional) Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
             <param name="inputParameters">  (Optional) Options for controlling the input. </param>
             <param name="outputParameters"> (Optional) Options for controlling the output. </param>
            
             <returns>   An asynchronous result that yields a T. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperator.GetListAsync``1(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="sqlText"></param>
            <param name="commandType"></param>
            <param name="transaction"></param>
            <param name="inputParameters"></param>
            <param name="outputParameters"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperator.ExecuteScalarAsAsync``1(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="sqlText"></param>
            <param name="commandType"></param>
            <param name="transaction"></param>
            <param name="inputParameters"></param>
            <param name="outputParameters"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperator.ExecuteAsLongAsync(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="sqlText"></param>
            <param name="commandType"></param>
            <param name="transaction"></param>
            <param name="inputParameters"></param>
            <param name="outputParameters"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperator.ExecuteAsDecimalAsync(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="sqlText"></param>
            <param name="commandType"></param>
            <param name="transaction"></param>
            <param name="inputParameters"></param>
            <param name="outputParameters"></param>
            <returns></returns>
        </member>
        <member name="T:SimpleInfra.Data.Extensions.SimpleDbAsyncOperatorWP">
             <summary>   A Dx connection asynchronous operation extension. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperatorWP.ExecuteAsync(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
             <summary>
             An IDbConnection extension method that executes the asynchronous operation.
             </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">   The connection to act on. </param>
             <param name="sql">          The SQL. </param>
             <param name="commandType">  (Optional) Type of the command. </param>
             <param name="transaction">  (Optional) The transaction. </param>
             <param name="parameters">   A variable-length parameters list containing parameters. </param>
            
             <returns>   An asynchronous result that yields the execute. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperatorWP.ExecuteReaderAsync(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
             <summary>
             An IDbConnection extension method that executes the reader asynchronous operation.
             </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">   The connection to act on. </param>
             <param name="sql">          The SQL. </param>
             <param name="commandType">  (Optional) Type of the command. </param>
             <param name="transaction">  (Optional) The transaction. </param>
             <param name="parameters">   A variable-length parameters list containing parameters. </param>
            
             <returns>   An asynchronous result that yields the execute reader. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperatorWP.ExecuteScalarAsync(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
             <summary>
             An IDbConnection extension method that executes the scalar asynchronous operation.
             </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">   The connection to act on. </param>
             <param name="sql">          The SQL. </param>
             <param name="commandType">  (Optional) Type of the command. </param>
             <param name="transaction">  (Optional) The transaction. </param>
             <param name="parameters">   A variable-length parameters list containing parameters. </param>
            
             <returns>   An asynchronous result that yields the execute scalar. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperatorWP.GetResultSetAsync(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
             <summary>   An IDbConnection extension method that gets result set asynchronous. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">   The connection to act on. </param>
             <param name="sql">          The SQL. </param>
             <param name="commandType">  (Optional) Type of the command. </param>
             <param name="transaction">  (Optional) The transaction. </param>
             <param name="parameters">   A variable-length parameters list containing parameters. </param>
            
             <returns>   An asynchronous result that yields the result set. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperatorWP.GetDynamicResultSetAsync(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
             <summary>
             An IDbConnection extension method that gets dynamic result set asynchronous.
             </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">   The connection to act on. </param>
             <param name="sql">          The SQL. </param>
             <param name="commandType">  (Optional) Type of the command. </param>
             <param name="transaction">  (Optional) The transaction. </param>
             <param name="parameters">   A variable-length parameters list containing parameters. </param>
            
             <returns>   An asynchronous result that yields the dynamic result set. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperatorWP.GetDynamicResultSetWithPagingAsync(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.UInt32,System.UInt32,System.Object[])">
             <summary>
             An IDbConnection extension method that gets dynamic result set with paging asynchronous.
             </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">       The connection to act on. </param>
             <param name="sql">              The SQL. </param>
             <param name="commandType">      Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
             <param name="pageNumber">       (Optional) The page number. </param>
             <param name="pageItemCount">    (Optional) Number of page ıtems. </param>
             <param name="parameters">       A variable-length parameters list containing parameters. </param>
            
             <returns>   An asynchronous result that yields the dynamic result set with paging. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperatorWP.GetMultiDynamicResultSetAsync(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
             <summary>
             An IDbConnection extension method that gets multi dynamic result set asynchronous.
             </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">   The connection to act on. </param>
             <param name="sql">          The SQL. </param>
             <param name="commandType">  (Optional) Type of the command. </param>
             <param name="transaction">  (Optional) The transaction. </param>
             <param name="parameters">   A variable-length parameters list containing parameters. </param>
            
             <returns>   An asynchronous result that yields the multi dynamic result set. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperatorWP.FirstAsDynamicAsync(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
             <summary>   An IDbConnection extension method that first as dynamic asynchronous. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">   The connection to act on. </param>
             <param name="sqlText">      The SQL text. </param>
             <param name="commandType">  (Optional) Type of the command. </param>
             <param name="transaction">  (Optional) The transaction. </param>
             <param name="parameters">   A variable-length parameters list containing parameters. </param>
            
             <returns>   An asynchronous result that yields the first as dynamic. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperatorWP.FirstAsync``1(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
             <summary>   An IDbConnection extension method that first asynchronous. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <typeparam name="T">    Generic type parameter. </typeparam>
             <param name="connection">   The connection to act on. </param>
             <param name="sqlText">      The SQL text. </param>
             <param name="commandType">  (Optional) Type of the command. </param>
             <param name="transaction">  (Optional) The transaction. </param>
             <param name="parameters">   A variable-length parameters list containing parameters. </param>
            
             <returns>   An asynchronous result that yields a T. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperatorWP.LastAsDynamicAsync(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
             <summary>   An IDbConnection extension method that last as dynamic asynchronous. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">   The connection to act on. </param>
             <param name="sqlText">      The SQL text. </param>
             <param name="commandType">  (Optional) Type of the command. </param>
             <param name="transaction">  (Optional) The transaction. </param>
             <param name="parameters">   A variable-length parameters list containing parameters. </param>
            
             <returns>   An asynchronous result that yields the last as dynamic. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperatorWP.LastAsync``1(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
             <summary>   An IDbConnection extension method that last asynchronous. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <typeparam name="T">Generic type parameter. </typeparam>
             <param name="connection">The connection to act on. </param>
             <param name="sqlText">The SQL text. </param>
             <param name="commandType">(Optional) Type of the command. </param>
             <param name="transaction">(Optional) The transaction. </param>
             <param name="parameters">A variable-length parameters list containing parameters. </param>
            
             <returns>   An asynchronous result that yields a T. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperatorWP.GetListAsync``1(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="sqlText"></param>
            <param name="commandType"></param>
            <param name="transaction"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperatorWP.ExecuteScalarAsAsync``1(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="sqlText"></param>
            <param name="commandType"></param>
            <param name="transaction"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperatorWP.ExecuteAsLongAsync(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="sqlText"></param>
            <param name="commandType"></param>
            <param name="transaction"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbAsyncOperatorWP.ExecuteAsDecimalAsync(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="sqlText"></param>
            <param name="commandType"></param>
            <param name="transaction"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:SimpleInfra.Data.Extensions.SimpleDbOperatorV2">
             <summary>   A connection operation extension. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorV2.ExecuteReaderQuery(System.Data.IDbConnection,SimpleInfra.Data.Extensions.Objects.SimpleCommandDefinition,System.Collections.Generic.Dictionary{System.String,System.Object}@,System.Data.IDbTransaction,System.Nullable{System.Data.CommandBehavior})">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="commandDefinition"></param>
             <param name="outputValues"></param>
             <param name="transaction"></param>
             <param name="commandBehavior"></param>
             <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorV2.ExecuteScalarQuery(System.Data.IDbConnection,SimpleInfra.Data.Extensions.Objects.SimpleCommandDefinition,System.Data.IDbTransaction)">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="commandDefinition"></param>
             <param name="transaction"></param>
             <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorV2.GetResultSetQuery(System.Data.IDbConnection,SimpleInfra.Data.Extensions.Objects.SimpleCommandDefinition,System.Data.IDbTransaction)">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="commandDefinition"></param>
             <param name="outputValues"></param>
             <param name="transaction"></param>
             <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorV2.GetDynamicResultSetQuery(System.Data.IDbConnection,SimpleInfra.Data.Extensions.Objects.SimpleCommandDefinition,System.Data.IDbTransaction,System.Nullable{System.Data.CommandBehavior})">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="commandDefinition"></param>
             <param name="outputValues"></param>
             <param name="transaction"></param>
             <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorV2.GetDynamicResultSetWithPagingQuery(System.Data.IDbConnection,SimpleInfra.Data.Extensions.Objects.SimpleCommandDefinition,System.Data.IDbTransaction,System.UInt32,System.UInt32)">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="commandDefinition"></param>
             <param name="outputValues"></param>
             <param name="transaction"></param>
             <param name="pageNumber"></param>
             <param name="pageItemCount"></param>
             <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorV2.GetMultiDynamicResultSetQuery(System.Data.IDbConnection,SimpleInfra.Data.Extensions.Objects.SimpleCommandDefinition,System.Collections.Generic.Dictionary{System.String,System.Object}@,System.Data.IDbTransaction)">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="commandDefinition"></param>
             <param name="outputValues"></param>
             <param name="transaction"></param>
             <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorV2.ExecuteScalarQueryAs``1(System.Data.IDbConnection,SimpleInfra.Data.Extensions.Objects.SimpleCommandDefinition,System.Data.IDbTransaction)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="connection"></param>
             <param name="commandDefinition"></param>
             <param name="outputValues"></param>
             <param name="transaction"></param>
             <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorV2.QueryFirstAsDynamic(System.Data.IDbConnection,SimpleInfra.Data.Extensions.Objects.SimpleCommandDefinition,System.Data.IDbTransaction)">
             <summary>   An IDbConnection extension method that first as dynamic. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">       The connection to act on. </param>
             <param name="sqlText">          The SQL text. </param>
             <param name="commandType">      (Optional) Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
            
             <returns>   An ExpandoObject. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorV2.QueryFirst``1(System.Data.IDbConnection,SimpleInfra.Data.Extensions.Objects.SimpleCommandDefinition,System.Data.IDbTransaction)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="connection"></param>
             <param name="commandDefinition"></param>
             <param name="outputValues"></param>
             <param name="transaction"></param>
             <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorV2.QueryLastAsDynamic(System.Data.IDbConnection,SimpleInfra.Data.Extensions.Objects.SimpleCommandDefinition,System.Data.IDbTransaction)">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="commandDefinition"></param>
             <param name="outputValues"></param>
             <param name="transaction"></param>
             <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorV2.QueryLast``1(System.Data.IDbConnection,SimpleInfra.Data.Extensions.Objects.SimpleCommandDefinition,System.Data.IDbTransaction)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="connection"></param>
             <param name="commandDefinition"></param>
             <param name="outputValues"></param>
             <param name="transaction"></param>
             <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorV2.GetList``1(System.Data.IDbConnection,SimpleInfra.Data.Extensions.Objects.SimpleCommandDefinition,System.Data.IDbTransaction)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="connection"></param>
             <param name="commandDefinition"></param>
             <param name="outputValues"></param>
             <param name="transaction"></param>
             <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorV2.GetDynamicResultSetSkipAndTake(System.Data.IDbConnection,SimpleInfra.Data.Extensions.Objects.SimpleCommandDefinition,System.Data.IDbTransaction,System.UInt32,System.UInt32)">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="commandDefinition"></param>
             <param name="outputValues"></param>
             <param name="transaction"></param>
             <param name="skip"></param>
             <param name="take"></param>
             <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorV2.GetListSkipAndTake``1(System.Data.IDbConnection,SimpleInfra.Data.Extensions.Objects.SimpleCommandDefinition,System.Data.IDbTransaction,System.UInt32,System.UInt32)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="connection"></param>
             <param name="commandDefinition"></param>
             <param name="outputValues"></param>
             <param name="transaction"></param>
             <param name="skip"></param>
             <param name="take"></param>
             <returns></returns>
        </member>
        <member name="T:SimpleInfra.Data.Extensions.DbConnectionExtension">
             <summary>   A dx connection extension. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DbConnectionExtension.GetServerVersion(System.Data.IDbConnection)">
             <summary>   An IDbConnection extension method that gets server version. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are
                                                         null. </exception>
            
             <param name="dbConnection"> The dbConnection to act on. </param>
            
             <returns>   The server version. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DbConnectionExtension.GetConnectionStringBuilder(System.Data.IDbConnection)">
             <summary>   An IDbConnection extension method that gets connection string builder. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <exception cref="T:System.ArgumentNullException"> Thrown when one or more required arguments are null. </exception>
            
             <param name="dbConnection"> The dbConnection to act on. </param>
            
             <returns>   The connection string builder. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DbConnectionExtension.CloseIfNot(System.Data.IDbConnection)">
             <summary> An IDbConnection extension method that closes connection if not opened. </summary>
            
             <remarks> Msacli, 22.04.2019. </remarks>
            
             <param name="dbConnection"> The dbConnection to act on. </param>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DbConnectionExtension.OpenIfNot(System.Data.IDbConnection)">
             <summary>   An IDbConnection extension method that opens connection if not opened. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="dbConnection"> The dbConnection to act on. </param>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DbConnectionExtension.OpenAndBeginTransaction(System.Data.IDbConnection,System.Nullable{System.Data.IsolationLevel})">
             <summary>   An IDbConnection extension method that opens and begin transaction. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="dbConnection">     The dbConnection to act on. </param>
             <param name="isolationLevel">   (Optional) The isolation level. </param>
            
             <returns>   An IDbTransaction. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DbConnectionExtension.GetParameterPrefix(System.Data.IDbConnection)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="T:SimpleInfra.Data.Extensions.SimpleDbOperator">
             <summary>   A connection operation extension. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperator.Execute(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>   An IDbConnection extension method that executes. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">       The connection to act on. </param>
             <param name="sql">              The SQL. </param>
             <param name="commandType">      (Optional) Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
             <param name="inputParameters">  (Optional) Options for controlling the input. </param>
             <param name="outputParameters"> (Optional) Options for controlling the output. </param>
            
             <returns>   An int. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperator.ExecuteReader(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Data.CommandBehavior})">
             <summary>   An IDbConnection extension method that executes the reader operation. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">       The connection to act on. </param>
             <param name="sql">              The SQL. </param>
             <param name="commandType">      (Optional) Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
             <param name="inputParameters">  (Optional) Options for controlling the input. </param>
             <param name="outputParameters"> (Optional) Options for controlling the output. </param>
             <param name="commandBehavior">CommandBehaviour for DataReader</param>
            
             <returns>   An IDataReader. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperator.ExecuteScalar(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>   An IDbConnection extension method that executes the scalar operation. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">       The connection to act on. </param>
             <param name="sql">              The SQL. </param>
             <param name="commandType">      (Optional) Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
             <param name="inputParameters">  (Optional) Options for controlling the input. </param>
             <param name="outputParameters"> (Optional) Options for controlling the output. </param>
            
             <returns>   An object. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperator.GetResultSet(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>   An IDbConnection extension method that gets result set of sql query. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">       The connection to act on. </param>
             <param name="sql">              The SQL. </param>
             <param name="commandType">      (Optional) Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
             <param name="inputParameters">  (Optional) Options for controlling the input. </param>
             <param name="outputParameters"> (Optional) Options for controlling the output. </param>
            
             <returns>   The DataSet object instance. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperator.GetDynamicResultSet(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>   An IDbConnection extension method that gets dynamic result set. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">       The connection to act on. </param>
             <param name="sql">              The SQL. </param>
             <param name="commandType">      (Optional) Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
             <param name="inputParameters">  (Optional) Options for controlling the input. </param>
             <param name="outputParameters"> (Optional) Options for controlling the output. </param>
            
             <returns>   The dynamic result set. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperator.GetDynamicResultSetWithPaging(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object},System.UInt32,System.UInt32)">
             <summary>
             An IDbConnection extension method that gets dynamic result set with paging.
             </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">       The connection to act on. </param>
             <param name="sql">              The SQL. </param>
             <param name="commandType">      Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
             <param name="inputParameters">  (Optional) Options for controlling the input. </param>
             <param name="outputParameters"> (Optional) Options for controlling the output. </param>
             <param name="pageNumber">       (Optional) The page number. </param>
             <param name="pageItemCount">    (Optional) Number of page ıtems. </param>
            
             <returns>   The dynamic result set with paging. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperator.GetMultiDynamicResultSet(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>   An IDbConnection extension method that gets multi dynamic result set. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">       The connection to act on. </param>
             <param name="sql">              The SQL. </param>
             <param name="commandType">      (Optional) Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
             <param name="inputParameters">  (Optional) Options for controlling the input. </param>
             <param name="outputParameters"> (Optional) Options for controlling the output. </param>
            
             <returns>   The multi dynamic result set. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperator.ExecuteScalarAs``1(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
             An IDbConnection extension method that executes the scalar as operation.
             </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <typeparam name="T">    Generic type parameter. </typeparam>
             <param name="connection">       The connection to act on. </param>
             <param name="sqlText">          The SQL text. </param>
             <param name="commandType">      (Optional) Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
             <param name="inputParameters">  (Optional) Options for controlling the input. </param>
             <param name="outputParameters"> (Optional) Options for controlling the output. </param>
            
             <returns>   A T. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperator.ExecuteAsLong(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>   An IDbConnection extension method that executes as long operation. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">       The connection to act on. </param>
             <param name="sqlText">          The SQL text. </param>
             <param name="commandType">      (Optional) Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
             <param name="inputParameters">  (Optional) Options for controlling the input. </param>
             <param name="outputParameters"> (Optional) Options for controlling the output. </param>
            
             <returns>   A long. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperator.ExecuteAsDecimal(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>   An IDbConnection extension method that executes as decimal operation. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">       The connection to act on. </param>
             <param name="sqlText">          The SQL text. </param>
             <param name="commandType">      (Optional) Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
             <param name="inputParameters">  (Optional) Options for controlling the input. </param>
             <param name="outputParameters"> (Optional) Options for controlling the output. </param>
            
             <returns>   A decimal. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperator.FirstAsDynamic(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>   An IDbConnection extension method that first as dynamic. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">       The connection to act on. </param>
             <param name="sqlText">          The SQL text. </param>
             <param name="commandType">      (Optional) Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
             <param name="inputParameters">  (Optional) Options for controlling the input. </param>
             <param name="outputParameters"> (Optional) Options for controlling the output. </param>
            
             <returns>   An ExpandoObject. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperator.First``1(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>   An IDbConnection extension method that firsts. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <typeparam name="T">    Generic type parameter. </typeparam>
             <param name="connection">       The connection to act on. </param>
             <param name="sqlText">          The SQL text. </param>
             <param name="commandType">      (Optional) Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
             <param name="inputParameters">  (Optional) Options for controlling the input. </param>
             <param name="outputParameters"> (Optional) Options for controlling the output. </param>
            
             <returns>   A T. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperator.LastAsDynamic(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>   An IDbConnection extension method that last as dynamic. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">       The connection to act on. </param>
             <param name="sqlText">          The SQL text. </param>
             <param name="commandType">      (Optional) Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
             <param name="inputParameters">  (Optional) Options for controlling the input. </param>
             <param name="outputParameters"> (Optional) Options for controlling the output. </param>
            
             <returns>   An ExpandoObject. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperator.Last``1(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>   An IDbConnection extension method that lasts. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <typeparam name="T">    Generic type parameter. </typeparam>
             <param name="connection">       The connection to act on. </param>
             <param name="sqlText">          The SQL text. </param>
             <param name="commandType">      (Optional) Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
             <param name="inputParameters">  (Optional) Options for controlling the input. </param>
             <param name="outputParameters"> (Optional) Options for controlling the output. </param>
            
             <returns>   A T. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperator.GetList``1(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="sqlText"></param>
            <param name="commandType"></param>
            <param name="transaction"></param>
            <param name="inputParameters"></param>
            <param name="outputParameters"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperator.GetDynamicResultSetSkipAndTake(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object},System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="sql"></param>
            <param name="commandType"></param>
            <param name="transaction"></param>
            <param name="inputParameters"></param>
            <param name="outputParameters"></param>
            <param name="skip"></param>
            <param name="take"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperator.GetListSkipAndTake``1(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object},System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="sqlText"></param>
            <param name="commandType"></param>
            <param name="transaction"></param>
            <param name="inputParameters"></param>
            <param name="outputParameters"></param>
            <param name="skip"></param>
            <param name="take"></param>
            <returns></returns>
        </member>
        <member name="T:SimpleInfra.Data.Extensions.SimpleDbOperatorWP">
             <summary>   A db connection operation extension v 2. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorWP.Execute(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
             <summary>   An IDbConnection extension method that executes. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">   The connection to act on. </param>
             <param name="sql">          The SQL. </param>
             <param name="commandType">  (Optional) Type of the command. </param>
             <param name="transaction">  (Optional) The transaction. </param>
             <param name="parameters">   A variable-length parameters list containing parameters. </param>
            
             <returns>   An int. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorWP.ExecuteReader(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
             <summary>   An IDbConnection extension method that executes the reader operation. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">   The connection to act on. </param>
             <param name="sql">          The SQL. </param>
             <param name="commandType">  (Optional) Type of the command. </param>
             <param name="transaction">  (Optional) The transaction. </param>
             <param name="parameters">   A variable-length parameters list containing parameters. </param>
            
             <returns>   An IDataReader. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorWP.ExecuteScalar(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
             <summary>   An IDbConnection extension method that executes the scalar operation. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">   The connection to act on. </param>
             <param name="sql">          The SQL. </param>
             <param name="commandType">  (Optional) Type of the command. </param>
             <param name="transaction">  (Optional) The transaction. </param>
             <param name="parameters">   A variable-length parameters list containing parameters. </param>
            
             <returns>   An object. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorWP.GetResultSet(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
             <summary>   An IDbConnection extension method that gets result set. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">   The connection to act on. </param>
             <param name="sql">          The SQL. </param>
             <param name="commandType">  (Optional) Type of the command. </param>
             <param name="transaction">  (Optional) The transaction. </param>
             <param name="parameters">   A variable-length parameters list containing parameters. </param>
            
             <returns>   The result set. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorWP.GetDynamicResultSet(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
             <summary>   An IDbConnection extension method that gets dynamic result set. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">   The connection to act on. </param>
             <param name="sql">          The SQL. </param>
             <param name="commandType">  (Optional) Type of the command. </param>
             <param name="transaction">  (Optional) The transaction. </param>
             <param name="parameters">   A variable-length parameters list containing parameters. </param>
            
             <returns>   The dynamic result set. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorWP.GetDynamicResultSetWithPaging(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.UInt32,System.UInt32,System.Object[])">
             <summary>
             An IDbConnection extension method that gets dynamic result set with paging.
             </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">       The connection to act on. </param>
             <param name="sql">              The SQL. </param>
             <param name="commandType">      Type of the command. </param>
             <param name="transaction">      (Optional) The transaction. </param>
             <param name="pageNumber">       (Optional) The page number. </param>
             <param name="pageItemCount">    (Optional) Number of page ıtems. </param>
             <param name="parameters">       A variable-length parameters list containing parameters. </param>
            
             <returns>   The dynamic result set with paging. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorWP.GetMultiDynamicResultSet(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
             <summary>   An IDbConnection extension method that gets multi dynamic result set. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">   The connection to act on. </param>
             <param name="sql">          The SQL. </param>
             <param name="commandType">  (Optional) Type of the command. </param>
             <param name="transaction">  (Optional) The transaction. </param>
             <param name="parameters">   A variable-length parameters list containing parameters. </param>
            
             <returns>   The multi dynamic result set. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorWP.ExecuteScalarAs``1(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
             <summary>
             An IDbConnection extension method that executes the scalar as operation.
             </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <typeparam name="T">    Generic type parameter. </typeparam>
             <param name="connection">   The connection to act on. </param>
             <param name="sqlText">      The SQL text. </param>
             <param name="commandType">  (Optional) Type of the command. </param>
             <param name="transaction">  (Optional) The transaction. </param>
             <param name="parameters">   A variable-length parameters list containing parameters. </param>
            
             <returns>   A T. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorWP.ExecuteAsLong(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
             <summary>   An IDbConnection extension method that executes as long operation. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">   The connection to act on. </param>
             <param name="sqlText">      The SQL text. </param>
             <param name="commandType">  (Optional) Type of the command. </param>
             <param name="transaction">  (Optional) The transaction. </param>
             <param name="parameters">   A variable-length parameters list containing parameters. </param>
            
             <returns>   A long. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorWP.ExecuteAsDecimal(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
             <summary>   An IDbConnection extension method that executes as decimal operation. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">   The connection to act on. </param>
             <param name="sqlText">      The SQL text. </param>
             <param name="commandType">  (Optional) Type of the command. </param>
             <param name="transaction">  (Optional) The transaction. </param>
             <param name="parameters">   A variable-length parameters list containing parameters. </param>
            
             <returns>   A decimal. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorWP.FirstAsDynamic(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
             <summary>   An IDbConnection extension method that first as dynamic. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">   The connection to act on. </param>
             <param name="sqlText">      The SQL text. </param>
             <param name="commandType">  (Optional) Type of the command. </param>
             <param name="transaction">  (Optional) The transaction. </param>
             <param name="parameters">   A variable-length parameters list containing parameters. </param>
            
             <returns>   An ExpandoObject. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorWP.First``1(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
             <summary>   An IDbConnection extension method that firsts. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <typeparam name="T">    Generic type parameter. </typeparam>
             <param name="connection">   The connection to act on. </param>
             <param name="sqlText">      The SQL text. </param>
             <param name="commandType">  (Optional) Type of the command. </param>
             <param name="transaction">  (Optional) The transaction. </param>
             <param name="parameters">   A variable-length parameters list containing parameters. </param>
            
             <returns>   A T. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorWP.LastAsDynamic(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
             <summary>   An IDbConnection extension method that last as dynamic. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="connection">   The connection to act on. </param>
             <param name="sqlText">      The SQL text. </param>
             <param name="commandType">  (Optional) Type of the command. </param>
             <param name="transaction">  (Optional) The transaction. </param>
             <param name="parameters">   A variable-length parameters list containing parameters. </param>
            
             <returns>   An ExpandoObject. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorWP.Last``1(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
             <summary>   An IDbConnection extension method that lasts. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <typeparam name="T">    Generic type parameter. </typeparam>
             <param name="connection">   The connection to act on. </param>
             <param name="sqlText">      The SQL text. </param>
             <param name="commandType">  (Optional) Type of the command. </param>
             <param name="transaction">  (Optional) The transaction. </param>
             <param name="parameters">   A variable-length parameters list containing parameters. </param>
            
             <returns>   A T. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleDbOperatorWP.GetList``1(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDbTransaction,System.Object[])">
            <summary>
            Get List of model
            </summary>
            <param name="connection"></param>
            <param name="sqlText"></param>
            <param name="commandType"></param>
            <param name="transaction"></param>
            <param name="parameters">DbParameter List</param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleConnectionTypeBuilder.GetDbConnectionType(System.Data.IDbConnection)">
            <summary>
            Gets Connection Type
            </summary>
            <param name="connection">Connection instance</param>
            <returns>returns DbConnectionTypes enum.</returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.SimpleConnectionTypeBuilder.GetDbConnectionType``1(``0)">
            <summary>
            Gets Connection Type
            </summary>
            <typeparam name="T">DbConnection class.</typeparam>
            <param name="connection">Connection instance</param>
            <returns>returns DbConnectionTypes enum.</returns>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Constants.SimpleAppValues.CommandTimeout">
            <summary>
            General Command Timeout value.
            </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Constants.SimpleAppValues.NullValue">
            <summary>
            means DbNull.Value.
            </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Constants.SimpleAppValues.ErrorFileDateFormat">
            <summary>
            Time Format: yyyy-MM-dd-HH-mm-ss
            </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Constants.SimpleAppValues.GeneralDateFormat">
            <summary>
            Time Format: yyyy-MM-dd, HH:mm:ss ffffff
            </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Constants.SimpleAppValues.ServerVersionProperty">
            <summary>   The server version property. </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Constants.SimpleAppValues.ParameterQueryDelimiter">
            <summary>
            char '|'
            </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Constants.SimpleAppValues.ParameterPropertyDelimiter">
            <summary>
            char ';'
            </summary>
        </member>
        <member name="T:SimpleInfra.Data.Extensions.DataExtensions">
             <summary>   Description of DataExtensions. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DataExtensions.ToList``1(System.Data.DataTable,System.Boolean)">
             <summary>   This method returns A List of T object. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <typeparam name="T">    T object type. </typeparam>
             <param name="datatable">            Datatble object. </param>
             <param name="accordingToColumn">    if it is true, returns a List with DataTable Columns else
                                                 returns a List with PropertyInfo of object. </param>
            
             <returns>   Returns A List of T object. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DataExtensions.GetPageOfDataTable(System.Data.DataTable,System.Int32,System.Int32)">
             <summary>   A DataTable extension method that gets page of data table. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <exception cref="T:System.NullReferenceException">   Thrown when a value was unexpectedly null. </exception>
             <exception cref="T:System.Exception">                Thrown when an exception error condition occurs. </exception>
            
             <param name="dt">           DataTable object. </param>
             <param name="pageNumber">   The page number. </param>
             <param name="rowCount">     Number of rows. </param>
            
             <returns>   The page of data table. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DataExtensions.GetColumnsOfDataTable(System.Data.DataTable,System.String[])">
             <summary>   Returns a DataTable with Selected column names. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="dt">           DataTable object. </param>
             <param name="columnList">   column names array. </param>
            
             <returns>   Returns a DataTable with Selected column names. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DataExtensions.GetColumnsOfDataTable(System.Data.DataTable,System.Int32[])">
             <summary>   Returns a DataTable with Selected column numbers. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="dt">           DataTable object. </param>
             <param name="columnList">   column numbers array. </param>
            
             <returns>   Returns a DataTable with Selected column numbers. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DataExtensions.GetObjectWithSelectedColumn(System.Data.DataTable,System.String,System.Object,System.String)">
             <summary>   Returns a object with given parameters. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="dt">                   DataTable object. </param>
             <param name="refColumn">            Name of Reference Column. </param>
             <param name="refValue">             Value of Reference Column. </param>
             <param name="destinationColumn">    Name of Destination Column. </param>
            
             <returns>
             Returns a object at destination column which contains reference value at reference column.
             Otherwise return null.
             </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DataExtensions.ExportAsExcelWithIncludeColumns(System.Data.DataTable,System.String,System.Object[])">
             <summary>
             A DataTable extension method that export as excel with ınclude columns.
             </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="dt">               DataTable object. </param>
             <param name="fileName">         Filename of the file. </param>
             <param name="includeColumns">   A variable-length parameters list containing include columns. </param>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DataExtensions.ExportAsExcelWithExcludeColumns(System.Data.DataTable,System.String,System.Object[])">
             <summary>
             A DataTable extension method that export as excel with exclude columns.
             </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="dt">               DataTable object. </param>
             <param name="fileName">         Filename of the file. </param>
             <param name="excludeColumns">   A variable-length parameters list containing exclude columns. </param>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DataExtensions.Copy(System.Data.DataTable)">
             <summary>   A DataTable extension method that copies the given dt. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="dt">   DataTable object. </param>
            
             <returns>   A DataTable. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DataExtensions.GetSomeColumnsAsTable(System.Data.DataTable,System.String[])">
             <summary>   A DataTable extension method that gets some columns as table. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="dt">           DataTable object. </param>
             <param name="columnList">   column names array. </param>
            
             <returns>   some columns as table. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DataExtensions.RowToObject``1(System.Data.DataRow,System.Data.DataColumnCollection)">
             <summary>   A DataRow extension method that row to object. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <typeparam name="T">    Generic type parameter. </typeparam>
             <param name="row">      The row to act on. </param>
             <param name="columns">  (Optional) The columns. </param>
            
             <returns>   A T instance. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DataExtensions.GetColumnAsUniqueList``1(System.Data.DataTable,System.String)">
             <summary>   A DataTable extension method that gets column as unique list. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are
                                                         null. </exception>
             <exception cref="T:System.ArgumentException">        Thrown when one or more arguments have
                                                         unsupported or illegal values. </exception>
            
             <typeparam name="T">    Generic type parameter. </typeparam>
             <param name="dataTable">    The dataTable to act on. </param>
             <param name="columnName">   Name of the column. </param>
            
             <returns>   The column as unique list. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DataExtensions.ToDynamicList(System.Data.DataTable)">
             <summary>   A DataTable extension method that converts a table to a dynamic list. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="table">    The table to act on. </param>
            
             <returns>   Table as a List&lt;ExpandoObject&gt; </returns>
        </member>
        <member name="T:SimpleInfra.Data.Extensions.DataReaderAsyncOperator">
             <summary>   A data reader asynchronous extensions. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DataReaderAsyncOperator.FirstRowAsync(System.Data.IDataReader)">
             <summary>   An IDataReader extension method that first row asynchronous. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="reader">   The dataReader to act on. </param>
            
             <returns>   An asynchronous result that yields the first row. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DataReaderAsyncOperator.LastRowAsync(System.Data.IDataReader)">
             <summary>   An IDataReader extension method that last row asynchronous. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="reader">   The dataReader to act on. </param>
            
             <returns>   An asynchronous result that yields the last row. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DataReaderAsyncOperator.GetDynamicResultSetAsync(System.Data.IDataReader,System.Boolean)">
             <summary>   Bind IDataReader content to ExpandoObject list. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="reader">       . </param>
             <param name="closeAtFinal"> (Optional) </param>
            
             <returns>Returns ExpandoObject object list.</returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DataReaderAsyncOperator.GetDynamicResultSetWithPagingAsync(System.Data.IDataReader,System.UInt32,System.UInt32,System.Boolean)">
             <summary>
             An IDataReader extension method that gets dynamic result set with paging asynchronous.
             </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="reader">           . </param>
             <param name="pageNumber">       (Optional) The page number. </param>
             <param name="pageItemCount">    (Optional) Number of page items. </param>
             <param name="closeAtFinal">     (Optional) </param>
            
             <returns>   An asynchronous result that yields the dynamic result set with paging. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DataReaderAsyncOperator.GetMultiDynamicResultSetAsync(System.Data.IDataReader)">
             <summary>
             An IDataReader extension method that gets multi dynamic result set asynchronous.
             </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="reader">IDataReader object.</param>
            
             <returns>   An asynchronous result that yields the multi dynamic result set. </returns>
        </member>
        <member name="T:SimpleInfra.Data.Extensions.DataReaderOperator">
             <summary>   A data reader extensions. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DataReaderOperator.FirstRow(System.Data.IDataReader)">
             <summary>   An IDataReader extension method that first row. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are
                                                         null. </exception>
            
             <param name="reader">   The dataReader to act on. </param>
            
             <returns>   An ExpandoObject. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DataReaderOperator.LastRow(System.Data.IDataReader)">
             <summary>   An IDataReader extension method that last row. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are
                                                         null. </exception>
            
             <param name="reader">   The dataReader to act on. </param>
            
             <returns>   An ExpandoObject. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DataReaderOperator.GetDynamicResultSet(System.Data.IDataReader,System.Boolean)">
             <summary>   Bind IDataReader content to ExpandoObject list. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are
                                                         null. </exception>
            
             <param name="reader">       . </param>
             <param name="closeAtFinal"> (Optional) </param>
            
             <returns>   Returns ExpandoObject object list. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DataReaderOperator.GetDynamicResultSetWithPaging(System.Data.IDataReader,System.UInt32,System.UInt32,System.Boolean)">
             <summary>
             An IDataReader extension method that gets dynamic result set with paging.
             </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <exception cref="T:System.ArgumentNullException">    Thrown when one or more required arguments are
                                                         null. </exception>
            
             <param name="reader">           . </param>
             <param name="pageNumber">       (Optional) The page number. </param>
             <param name="pageItemCount">    (Optional) Number of page ıtems. </param>
             <param name="closeAtFinal">     (Optional) </param>
            
             <returns>   The dynamic result set with paging. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DataReaderOperator.GetMultiDynamicResultSet(System.Data.IDataReader,System.Boolean)">
             <summary>   An IDataReader extension method that gets multi dynamic result set. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="reader">       . </param>
             <param name="closeAtFinal"> (Optional) </param>
            
             <returns>   The multi dynamic result set. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DataReaderOperator.GetDynamicFromDataReader(System.Data.IDataReader)">
             <summary>   Gets dynamic from data reader. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="dataReader">   The dataReader to act on. </param>
            
             <returns>   The dynamic from data reader. </returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DataReaderOperator.GetDynamicResultSetSkipAndTake(System.Data.IDataReader,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Get Expando List with skip and take options.
            </summary>
            <param name="reader"></param>
            <param name="skip"></param>
            <param name="take"></param>
            <param name="closeAtFinal"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DataReaderOperator.CloseIfNot(System.Data.IDataReader)">
             <summary>   An IDataReader extension method that closes if not. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="reader">   The dataReader to act on. </param>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DbCommandExtensions.CommandExtensions.SetCommandParameters(System.Data.IDbCommand,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>   creates parameters and sets their values of IDbCommand. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="command">          . </param>
             <param name="inputParameters">  (Optional) </param>
             <param name="outputParameters"> (Optional) </param>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DbCommandExtensions.CommandExtensions.SetCommandParameters(System.Data.IDbCommand,System.Object[])">
             <summary>   Sets parameters of DbCommand. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="command">      Db command. </param>
             <param name="parameters">   Db Command Parameters. </param>
        </member>
        <member name="M:SimpleInfra.Data.Extensions.DbCommandExtensions.CommandExtensions.GetOutParametersOfCommand(System.Data.IDbCommand)">
             <summary>   Get Output Values of IDbCommand. </summary>
            
             <remarks>   Msacli, 22.04.2019. </remarks>
            
             <param name="command">  db command </param>
            
             <returns>   The out parameters of command. </returns>
        </member>
        <member name="T:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes">
             <summary>   Values that represent Database connection types. </summary>
            
             <remarks>   Mustafa SAÇLI, 4.05.2019. </remarks>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.None">
             <summary>
            
             </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.Sql">
             <summary>
            
             </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.Oracle">
             <summary>
            
             </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.PostgreSql">
             <summary>
            
             </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.DB2">
             <summary>
            
             </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.Odbc">
             <summary>
            
             </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.Oledb">
             <summary>
            
             </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.MySql">
             <summary>
            
             </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.SqlCE">
             <summary>
            
             </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.FireBird">
             <summary>
            
             </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.SQLite">
             <summary>
            
             </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.VistaDB">
             <summary>
            
             </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.SqlBase">
             <summary>
            
             </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.Synergy">
            <summary>
            
            </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.SqlOdbc">
            <summary>   An enum constant representing the Sql odbc option. </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.SqlOledb">
            <summary>   An enum constant representing the Sql oledb option. </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.OracleOdbc">
            <summary>   An enum constant representing the Oracle odbc option. </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.OracleOledb">
            <summary>   An enum constant representing the Oracle oledb option. </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.PostgreSqlOdbc">
            <summary>   An enum constant representing the PostgreSql odbc option. </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.PostgreSqlOledb">
            <summary>   An enum constant representing the PostgreSql oledb option. </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.DB2Odbc">
            <summary>   An enum constant representing the DB2 odbc option. </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.DB2Oledb">
            <summary>   An enum constant representing the DB2 oledb option. </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.MySqlOdbc">
            <summary>   An enum constant representing the MySql odbc option. </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.MySqlOledb">
            <summary>   An enum constant representing the MySql oledb option. </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.FirebirdOdbc">
            <summary>   An enum constant representing the Firebird odbc option. </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.FirebirdOledb">
            <summary>   An enum constant representing the Firebird oledb option. </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.SqlBaseOdbc">
            <summary>   An enum constant representing the SQL base odbc option. </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.SqlBaseOledb">
            <summary>   An enum constant representing the SQL base oledb option. </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.SynergyOdbc">
            <summary>   An enum constant representing the synergy ODBC option. </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.SynergyOledb">
            <summary>   An enum constant representing the synergy oledb option. </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.NuoDb">
            <summary>
             An enum constant representing the nuo db= 130 option. http://www.nuodb.com/
            </summary>
        </member>
        <member name="F:SimpleInfra.Data.Extensions.Enums.DbConnectionTypes.SqlDatabase">
            <summary>
             An enum constant representing the SQL database= 131 option. SQLDATABASE.NET,
             http://sqldatabase.net/
            </summary>
        </member>
        <member name="T:SimpleInfra.Data.Extensions.Objects.SimpleCommandDefinition">
            <summary>
            Command Definition.
            </summary>
        </member>
        <member name="P:SimpleInfra.Data.Extensions.Objects.SimpleCommandDefinition.CommandText">
            <summary>
            Sql query.
            </summary>
        </member>
        <member name="P:SimpleInfra.Data.Extensions.Objects.SimpleCommandDefinition.CommandType">
            <summary>
            commandType of Sql
            </summary>
        </member>
        <member name="P:SimpleInfra.Data.Extensions.Objects.SimpleCommandDefinition.CommandTimeout">
            <summary>
            Command Timeout.
            </summary>
        </member>
        <member name="P:SimpleInfra.Data.Extensions.Objects.SimpleCommandDefinition.Parameters">
            <summary>
            Command Parameters
            </summary>
        </member>
        <member name="P:SimpleInfra.Data.Extensions.Objects.SimpleCommandParameter.ParameterName">
            <summary>
            Parameter Name
            </summary>
        </member>
        <member name="P:SimpleInfra.Data.Extensions.Objects.SimpleCommandParameter.ParameterColumnName">
            <summary>
            Parameter Column Name
            </summary>
        </member>
        <member name="P:SimpleInfra.Data.Extensions.Objects.SimpleCommandParameter.Value">
            <summary>
            Parameter value
            </summary>
        </member>
        <member name="P:SimpleInfra.Data.Extensions.Objects.SimpleCommandParameter.Direction">
            <summary>
            Parameter Direction
            </summary>
        </member>
        <member name="P:SimpleInfra.Data.Extensions.Objects.SimpleCommandParameter.DbType">
            <summary>
            Db Type of Parameter.
            </summary>
        </member>
        <member name="P:SimpleInfra.Data.Extensions.Objects.SimpleCommandParameter.Precision">
            <summary>
            Precision of Parameter.
            </summary>
        </member>
        <member name="P:SimpleInfra.Data.Extensions.Objects.SimpleCommandParameter.Scale">
            <summary>
            Scale of Parameter.
            </summary>
        </member>
        <member name="P:SimpleInfra.Data.Extensions.Objects.SimpleCommandParameter.Size">
            <summary>
            Size of Parameter.
            </summary>
        </member>
        <member name="P:SimpleInfra.Data.Extensions.Objects.SimpleCommandResult`1.OutputValues">
            <summary>
            Parameters for Output values.
            </summary>
        </member>
        <member name="P:SimpleInfra.Data.Extensions.Objects.SimpleCommandResult`1.Result">
            <summary>
            Result value.
            </summary>
        </member>
        <member name="T:SimpleInfra.Data.Extensions.Objects.ISimpleCommandResult`1">
            <summary>
            Object contains Result and Output parameter values.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:SimpleInfra.Data.Extensions.Objects.ISimpleCommandResult`1.OutputValues">
            <summary>
            Parameters for Output values.
            </summary>
        </member>
        <member name="P:SimpleInfra.Data.Extensions.Objects.ISimpleCommandResult`1.Result">
            <summary>
            Result value.
            </summary>
        </member>
    </members>
</doc>
